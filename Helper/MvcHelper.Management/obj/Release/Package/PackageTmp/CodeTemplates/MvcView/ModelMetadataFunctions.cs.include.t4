
<#+

// Describes the information about a property on the model
//class ModelProperty {
//	public ModelProperty()
//	{
//		this.NotSort=false;
//		this.NotShow=false;
//	}
//	public PropertyInfo Property { get; set;}
//	public bool NotSort{get;set;}
//	public bool NotShow{get;set;}
//	public string ValueExpression{get;set;}
//	public PropertyMetadata Metadata{get;set;}
//}
//List<ModelProperty> GetModelProperties()
//{
//	Type type=ModelMetadata.GetType();
//	List<ModelProperty> mps=new List<ModelProperty>();
//	foreach(PropertyMetadata pm in ModelMetadata.Properties)
//	{
//		ModelProperty mp=new ModelProperty();
//		mp.Property=type.GetProperty(pm.PropertyName, BindingFlags.Public | BindingFlags.Instance);
//		mp.Metadata=pm;
//		//mp.ValueExpression= pm.IsForeignKey? GetValueExpression(pm);
//		//var a=mp.Property.GetCustomAttribute(typeof(NotAllowShowInListAttribute),false);
//		//if (mp.Property.GetCustomAttribute(typeof(NotAllowShowInListAttribute),false)!=null)
//		//	mp.NotShow=true;
//		//if (mp.Property.GetCustomAttribute(typeof(NotAllowSortAttribute),false)!=null)
//		//	mp.NotSort=true;
//		mps.Add(mp);
//	}
//	return mps;
//}


// Gets the related entity information for an association property where there is an associated foreign key property.
// Note: ModelMetadata.RelatedEntities contains only the related entities associated through a foreign key property.

RelatedModelMetadata GetRelatedModelMetadata(PropertyMetadata property){
    RelatedModelMetadata propertyModel;
    IDictionary<string, RelatedModelMetadata> relatedProperties;
    if(ModelMetadata.RelatedEntities != null)
    {
        relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
    }
    else
    {
        relatedProperties = new Dictionary<string, RelatedModelMetadata>();
    }
    relatedProperties.TryGetValue(property.PropertyName, out propertyModel);

    return propertyModel;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName : property.PropertyName;
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpression(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.AssociationPropertyName + "." + propertyModel.DisplayPropertyName : property.PropertyName;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName() {
    return (ModelMetadata.PrimaryKeys != null && ModelMetadata.PrimaryKeys.Count() == 1) ? ModelMetadata.PrimaryKeys[0].PropertyName : null;
}

bool IsPropertyGuid(PropertyMetadata property) {
    return String.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
}
#>