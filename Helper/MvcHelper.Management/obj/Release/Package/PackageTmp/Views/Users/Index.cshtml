@model IEnumerable<User>
@{
    Layout = "~/Views/Shared/_LayoutSubpage.cshtml";
    string pageId = ViewBag.PageId;
    PageInfo pageInfo = SiteDirectory.GetPageInfo(pageId);
    PageInfo controllerPageInfo = pageInfo.Parent;
    ViewBag.Pid = pageId;
    ViewBag.Pclass = pageInfo.Name;
    string actionPages = string.Join(",", controllerPageInfo.Children.Select(s => s.Name + ":'" + s.Id + "'"));
    Dictionary<string, bool> access = Access.All;
    Pager pager = ViewBag.Pager;
    OperationParam operationParam = ViewBag.OperationParam;
	User loginUser = ViewBag.LoginUser;
}
@section Style
{
    <style type="text/css">
        .col-RoleName { width: ; text-align: center }
        .col-LoginName { width: ; text-align: center }
        .col-Name { width: ; text-align: center }
        .col-MobileNumber { width: ; text-align: center }
        .col-CreateTime { width: ; text-align: center }
        .col-Status { width: ; text-align: center }
    </style>
}
@section ScriptHeader
{
    <script type="text/javascript">
        var actionPages = {@(Html.Raw(actionPages)) };
    </script>
}
<div id="tools-back">
    <form id="operation-form" name="operation-form" method="post" action="@pageInfo.Url">
        @Html.Hidden("OpType", operationParam.OpType)
        @Html.Hidden("OpArgument", operationParam.OpArgument)
        @Html.Hidden("OpPager", operationParam.OpPager)
        @Html.Hidden("OpQueryString", operationParam.OpQueryString)
        @Html.Hidden("OpSortProperty", operationParam.OpSortProperty)
        @Html.Hidden("OpSortDirection", operationParam.OpSortDirection)
    </form>
</div>
<div id="tools">
    <div id="tool-items">
        @Html.RenderRefreshToolbarItem()
        @Html.RenderCreateToolbarItem(controllerPageInfo, access)
        @Html.RenderDeleteToolbarItem(controllerPageInfo, access)
        @Html.RenderQueryToolbarItem()
    </div>
    <div id="tool-buttons">
    </div>
    <div class="clear-float">
    </div>
</div>
@Html.QueryFor(operationParam.OpQueryString)
@Html.RenderPager(pager)
<div class="list-table">
    <table>
        <thead>
            <tr>
                @Html.RenderNoColumnHeader()
                @Html.RenderSelectAllColumnHeader(access, controllerPageInfo)
                @Html.RenderDetailsColumnHeader(access, controllerPageInfo)
                @Html.RenderRankUpColumnHeader(access, controllerPageInfo)
                @Html.RenderEditColumnHeader(access, controllerPageInfo)
                @Html.RenderDeleteColumnHeader(access, controllerPageInfo)
                @Html.SortColumnHeaderFor(model => model.Role, model => model.Role.Name)
				@Html.SortColumnHeaderFor(model => model.LoginName)
				@Html.SortColumnHeaderFor(model => model.Name)
				@Html.SortColumnHeaderFor(model => model.MobileNumber)
				@Html.SortColumnHeaderFor(model => model.CreateTime)
				@Html.SortColumnHeaderFor(model => model.Status)
            </tr>
        </thead>
        <tbody>
            @{
                User item;
                for (int i = 0; i < Model.Count(); i++)
                {
                    item = Model.ElementAt(i);
					<tr>
						@Html.RenderNoColumn(i, pager)
						@Html.RenderSelectColumn(access, controllerPageInfo, item.Id)
                        @Html.RenderDetailsColumn(access, controllerPageInfo, item.Id, item.Name)
                        @Html.RenderRankUpColumn(access, controllerPageInfo, item.Id, pager.PageIndex, i)
                        @Html.RenderEditColumn(access, controllerPageInfo, item.Id, item.Name)
                        @Html.RenderDeleteColumn(access, controllerPageInfo, item.Id)
						<td class="col-RoleName">
							@Html.DisplayFor(modelItem => item.Role.Name)
						</td>
						<td class="col-LoginName">
							@Html.DisplayFor(modelItem => item.LoginName)
						</td>
						<td class="col-Name">
							@Html.DisplayFor(modelItem => item.Name)
						</td>
						<td class="col-MobileNumber">
							@Html.DisplayFor(modelItem => item.MobileNumber)
						</td>
						<td class="col-CreateTime">
							@Html.DisplayFor(modelItem => item.CreateTime)
						</td>
						<td class="col-Status">
							@Html.DisplayFor(modelItem => item.Status)
						</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
@if (Model.Count() > 0)
{
    @*<div class="list-note">
    </div>*@
}
@section ScriptFooter
{
    <script type="text/javascript" language="javascript">
        $(function ()
        {
        });
    </script>
}
